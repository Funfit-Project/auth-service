name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:

    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: set up jdk 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: set yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.DATASOURCE_URL }}
          spring.datasource.username: ${{ secrets.DATASOURCE_USERNAME }}
          spring.datasource.password: ${{ secrets.DATASOURCE_PASSWORD }}
          spring.rabbitmq.host: ${{ secrets.EC2_HOST }}
          jwt.secret: ${{ secrets.JWT_SECRET }}

      - name: build with gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: docker image build
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/funfit_auth .
          docker push ${{ secrets.DOCKER_USERNAME }}/funfit_auth

      - name: Deploy to Private EC2 via Bastion Host
        run: |
          # Public EC2로 접속하여 Private EC2로 SSH 터널링 후 Docker 컨테이너 실행
          ssh -A -o StrictHostKeyChecking=no -i ${{ secrets.EC2_PRIVATE_KEY }} ec2-user@${{ secrets.PUBLIC_EC2_HOST }} << EOF
            ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'INNER_EOF'
              # Docker pull 명령어로 이미지 가져오기
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/funfit_auth
              # 실행 중인 기존 컨테이너가 있다면 중지 및 삭제
              existing_container=$(docker ps -q -f name=funfit_auth)
              if [ -n "$existing_container" ]; then
                docker rm -f $existing_container
              fi
              docker run -d --name funfit_auth -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/funfit_auth:latest
              existing_rabbitmq=\$(sudo docker ps -q -f name=rabbitmq)
              if [ -z "\$existing_rabbitmq" ]; then
                sudo docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d rabbitmq:management
              fi
            INNER_EOF
          EOF
          

#      - name: Deploy to EC2 via Bastion
#        uses: appleboy/ssh-action@master
#        with:
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          host: ${{ secrets.PUBLIC_EC2_HOST }}
#          username: ubuntu
#          script: |
#            echo -e "Host private-ec2\n\tHostName ${{ secrets.EC2_HOST }}\n\tUser ubuntu\n\tProxyJump ubuntu@${{ secrets.BASTION_HOST }}" > ~/.ssh/config.ssh/config
#
#            ssh -F ~/.ssh/config private-ec2 << 'EOF'
#              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/funfit_auth
#              existing_container=$(docker ps -q -f name=funfit_auth)
#              if [ -n "$existing_container" ]; then
#                sudo docker rm -f $existing_container
#              fi
#              docker run -d --name funfit_auth -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/funfit_auth:latest
#              docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d rabbitmq:management
#            EOF
            

#      - name: deploy to EC2
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.PUBLIC_EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          script: |
#            ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_PRIVATE_KEY }} ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/funfit_auth
#
#            existing_container=$(docker ps -q -f name=funfit_auth)
#            if [ -n "$existing_container" ]; then
#            docker rm -f $existing_container
#            fi
#
#            docker run -d --name funfit_auth -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/funfit_auth:latest
#            docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d rabbitmq:management
#            EOF
            

#        with:
#          host: ${{ secrets.PUBLIC_EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          script: |
#            ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_PRIVATE_KEY }} ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/funfit_auth
#
#            existing_container=$(docker ps -q -f name=funfit_auth)
#            if [ -n "$existing_container" ]; then
#            docker rm -f $existing_container
#            fi
#
#            docker run -d --name funfit_auth -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/funfit_auth:latest
#            docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d rabbitmq:management
#            EOF

#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          script: |
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/funfit_auth
#
#            existing_container=$(docker ps -q -f name=funfit_auth)
#            if [ -n "$existing_container" ]; then
#            docker rm -f $existing_container
#            fi
#
#            docker run -d --name funfit_auth -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/funfit_auth:latest
#            docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d rabbitmq:management
